{"version":3,"sources":["components/Search.js","components/Result.js","components/Results.js","components/Popup.js","components/Error.js","App.js","serviceWorker.js","index.js"],"names":["Search","handleInput","search","className","type","placeholder","onChange","onKeyPress","Result","result","openPopup","handleImage","onClick","imdbID","src","Poster","onError","Title","Results","results","e","target","map","key","Popup","selected","closePopup","Year","imdbRating","Plot","Error","props","state","hasError","this","setTimeout","window","location","reload","children","error","Component","App","useState","s","setState","apiurl","value","prevState","axios","then","data","console","log","id","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.29d1ee3e.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Search({ handleInput, search }) {\n\treturn (\n\t\t<section className=\"searchbox-wrap\">\n\t\t\t<input\n\t\t\t\ttype=\"text\"\n\t\t\t\tplaceholder=\"Search for a movie...\"\n\t\t\t\tclassName=\"trysearch\"\n\t\t\t\tonChange={handleInput}\n\t\t\t\tonKeyPress={search}\n\t\t\t/>\n\t\t</section>\n\t)\n}\n\nexport default Search\n","import React from 'react'\n\nfunction Result({ result, openPopup, handleImage }) {\n\treturn (\n\t\t<div className=\"result\" onClick={() => openPopup(result.imdbID)}>\n\t\t\t<img src={result.Poster} onError={handleImage} />\n\t\t\t<h3>{result.Title}</h3>\n\t\t</div>\n\t)\n}\n\nexport default Result\n","import React from 'react'\n\nimport Result from './Result'\n\nfunction Results({ results, openPopup }) {\n\n\tconst handleImage = (e) => {\n\t\te.target.src = 'https://www.galamedianews.com/photo/share/no-image-300x400.jpg'\n\t}\n\treturn (\n\t\t<section className=\"results\">\n\t\t\t{results.map(result => (\n\t\t\t\t<Result key={result.imdbID} result={result} openPopup={openPopup} handleImage={handleImage} />\n\t\t\t))}\n\t\t</section>\n\t)\n}\n\nexport default Results\n","import React from 'react'\n\nfunction Popup({ selected, closePopup }) {\n\n\tconst handleImage = (e) => {\n\t\te.target.src = 'https://www.galamedianews.com/photo/share/no-image-300x400.jpg'\n\t}\n\treturn (\n\t\t<section className=\"popup\">\n\t\t\t<div className=\"content\">\n\t\t\t\t<h2>{selected.Title} <span>({selected.Year})</span></h2>\n\t\t\t\t<p className=\"rating\">Rating: {selected.imdbRating}</p>\n\t\t\t\t<div className=\"plot\">\n\t\t\t\t\t<img src={selected.Poster} onError={handleImage} />\n\t\t\t\t\t<p>{selected.Plot}</p>\n\t\t\t\t</div>\n\t\t\t\t<button className=\"close\" onClick={closePopup}>Close</button>\n\t\t\t</div>\n\t\t</section>\n\t)\n}\n\nexport default Popup\n","import React, { Component } from 'react'\r\n\r\nclass Error extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n\r\n\r\n    static getDerivedStateFromError(error) {\r\n        return {\r\n            hasError: true\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return setTimeout(() => {\r\n                return window.location.reload(true)\r\n            }, 4000),\r\n                <h2 className='error'>Couldn't find a movie! Please try again...</h2>\r\n\r\n        }\r\n        return this.props.children;\r\n    }\r\n\r\n}\r\n\r\nexport default Error\r\n","import React, { useState } from 'react'\nimport axios from 'axios'\n\nimport Search from './components/Search'\nimport Results from './components/Results'\nimport Popup from './components/Popup'\nimport Error from './components/Error'\n\nfunction App() {\n  const [state, setState] = useState({\n    s: \"\",\n    results: [],\n    selected: {}\n  });\n\n  const apiurl = \"http://www.omdbapi.com/?apikey=dfe6d885\";\n\n  const search = (e) => {\n    if (e.key === \"Enter\") {\n      axios(apiurl + \"&s=\" + state.s).then(({ data }) => {\n        let results = data.Search;\n\n        console.log(results);\n\n        setState(prevState => {\n          return { ...prevState, results: results }\n        })\n      });\n    }\n  }\n\n  const handleInput = (e) => {\n    let s = e.target.value;\n\n    setState(prevState => {\n      return { ...prevState, s: s }\n    });\n  }\n\n  const openPopup = id => {\n    axios(apiurl + \"&i=\" + id).then(({ data }) => {\n      let result = data;\n\n      console.log(result);\n\n      setState(prevState => {\n        return { ...prevState, selected: result }\n      });\n    });\n  }\n\n  const closePopup = () => {\n    setState(prevState => {\n      return { ...prevState, selected: {} }\n    });\n  }\n\n  return (\n    <Error>\n      <div className=\"App\">\n        <header>\n          <h1>Movie Database</h1>\n        </header>\n        <main>\n          <Search handleInput={handleInput} search={search} />\n          <Results results={state.results} openPopup={openPopup} />\n          {(typeof state.selected.Title != \"undefined\") ? <Popup selected={state.selected} closePopup={closePopup} /> : false}\n        </main>\n\n      </div>\n    </Error>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}